(defun is-palindrome (num)
  (do ((i 0 (1+ i))
       (str (write-to-string num))
       (pal t))
      ((or (not pal) (> i (/ (length str) 2))) pal)
    (setf pal (equalp (char str i) (char str (- (- (length str) 1) i))))))

(defun find-palindrome-products-under (num)
  (do ((i (- num 1) (1- i))
       (pals ()))
      ((< i (/ num 2)) pals)
    (do ((j (- num 1) (1- j)))
	((< j (/ num 2)))
      (if (is-palindrome (* i j))
	  (push (list i j (* i j)) pals)))))

(defun max-pal-product-under (num)
  (let ((max 0))
    (dolist (i (find-palindrome-products-under num))
      (if (> (nth 2 i) max)
	  (setf max (nth 2 i))))
    (return-from max-pal-product-under max)))
